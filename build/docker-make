#!/bin/bash
set -e

# Variables
#
# List of variables used in the build process.
DEFAULT_BUILD="docker.build"

DOCKERFILE="../src/Dockerfile"
DOCKERDIR="../src/."

# Preconfig Functions
#
# Functions used to preconfigure the build process.

configure () {
    DEV_REGISTRY=""
    DEV_NAMESPACE=""
    DEV_IMAGE=""
    DEV_TAG=""
    DEV_VERSION=""

    output=$DEFAULT_BUILD

    while getopts "h?:r:n:i:t:v:o:" opt; do
        case $opt in
            h|\?)
                echo "Usage: $0 configure -r REGISTRY -n NAMESPACE -i IMAGE -t TAG -v VERSION -o OUTPUT"
                exit 0
            ;;
            r) DEV_REGISTRY=$OPTARG
            ;;
            n) DEV_NAMESPACE=$OPTARG
            ;;
            i) DEV_IMAGE=$OPTARG
            ;;
            t) DEV_TAG=$OPTARG
            ;;
            v) DEV_VERSION=$OPTARG
            ;;
            o) output=$OPTARG
            ;;
        esac
    done

    rm -f $output
    echo "DEV_REGISTRY=$DEV_REGISTRY" >> $output
    echo "DEV_NAMESPACE=$DEV_NAMESPACE" >> $output
    echo "DEV_IMAGE=$DEV_IMAGE" >> $output
    echo "DEV_TAG=$DEV_TAG" >> $output
    echo "DEV_VERSION=$DEV_VERSION" >> $output
    for vars in variable.*; do        
        cat $vars >> $output
        echo >> $output
    done
    cat versions/$DEV_VERSION.variable >> $output
}

# Build Functions
#
# Functions that control behaviour of the build process.

build () { 
    input=$DEFAULT_BUILD

    while getopts "h?:i:" opt; do
        case $opt in
            h|\?)
                echo "Usage: $0 build -i INPUT"
                exit 0
            ;;
            i) input=$OPTARG
            ;;
        esac
    done

    source $input
    
    SOURCE_FROM=$(grep '\<FROM\>' $DOCKERFILE)
    TARGET_FROM="FROM ${FROM}"
    sed -i "s/${SOURCE_FROM}/${TARGET_FROM}/g" $DOCKERFILE
    
    DEV_CONTAINER=$DEV_REGISTRY/$DEV_NAMESPACE/$DEV_IMAGE:$DEV_TAG
    docker build \
        --build-arg VERSION="${BUILD_VERSION}"\
        --build-arg S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION}"\
        --build-arg S6_OVERLAY_URL="${S6_OVERLAY_URL}"\
        --pull -t ${DEV_CONTAINER} $DOCKERDIR

    sed -i "s/${TARGET_FROM}/${SOURCE_FROM}/g" $DOCKERFILE
}

all () {   
    for entry in *.build
    do
        echo "Building: $entry"
        (build -i $entry)
    done
}

# Storage Functions
#
# Functions that handle the images produced by the build process

pull () {
    input=$DEFAULT_BUILD

    while getopts "h?:i:" opt; do
        case $opt in
            h|\?)
                echo "Usage: $0 pull -i INPUT"
                exit 0
            ;;
            i) input=$OPTARG
            ;;
        esac
    done

    set -x
    source $input

    DEV_CONTAINER=$DEV_REGISTRY/$DEV_NAMESPACE/$DEV_IMAGE:$DEV_TAG
    docker pull $DEV_CONTAINER
}

push () {
    input=$DEFAULT_BUILD

    while getopts "h?:i:" opt; do
        case $opt in
            h|\?)
                echo "Usage: $0 push -i INPUT"
                exit 0
            ;;
            i) input=$OPTARG
            ;;
        esac
    done

    set -x
    source $input

    DEV_CONTAINER=$DEV_REGISTRY/$DEV_NAMESPACE/$DEV_IMAGE:$DEV_TAG
    docker push $DEV_CONTAINER
}

release () {
    input=$DEFAULT_BUILD

    while getopts "h?:i:r:" opt; do
        case $opt in
            h|\?)
                echo "Usage: $0 release -i INPUT"
                exit 0
            ;;
            i) input=$OPTARG
            ;;
        esac
    done

    set -x
    source $input

    DEV_CONTAINER=$DEV_REGISTRY/$DEV_NAMESPACE/$DEV_IMAGE:$DEV_TAG
    RELEASE=$REGISTRY/$NAMESPACE/$IMAGE:$TAG
    docker tag $DEV_CONTAINER $RELEASE
    docker push $RELEASE
}

# Tidy Functions
#
# Functions that tidy up after the build process.

prune () {
    set -x

    docker images -q -f dangling=true | xargs --no-run-if-empty docker rmi
}

purge () {
    set -x

    docker rmi $(docker images | grep '.*-dev' | awk '{print $3}')
}


# Tests Functions
#
# Functions that handle testing of the image.

test () {
    input=$DEFAULT_BUILD

    while getopts "h?:i:" opt; do
        case $opt in
            h|\?)
                help
                exit 0
            ;;
            i) input=$OPTARG
            ;;
        esac
    done

    set -x
    source $input

    cd ../test/
    echo "Nothing to test"
}

# Help
#
# A command line help utility
help() {
    echo "Usage: $0 COMMAND [arg...]" >&2
    echo
    echo "A utility for bundling common docker build utilities."
    echo 
    echo "Commands:"
    echo "   all        Builds all image for a Dockerfile"    
    echo "   build      Build an image from a Dockerfile" 
    echo "   clean      Removes the current working image" 
    echo "   configure  Configures the build process" 
    echo "   make       Build an image from a Dockerfile" 
    echo "   prune      Remove one or more unused images" 
    echo "   pull       Pull an image or a repository from a registry" 
    echo "   push       Push an image or a repository to a registry" 
    echo "   purge      Remove one of more images" 
    echo "   release    Build a release image from a Dockerfile" 
    echo "   test       Runs tests against a image." 
    echo
    echo

    exit 1
}

# Execution
#
# Executing the script.
"$@"